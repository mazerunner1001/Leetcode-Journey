\\ string question using memoization (divide and conquer)

class Solution {
public:
    unordered_map<string, vector<int>> memo;
    vector<int> diffWaysToCompute(string expression) {
        if (memo.count(expression)) return memo[expression];
        vector<int> results;
        int n = expression.size();
        for(int i=0; i<n; i++){
            char c = expression[i];
            if(c == '*' || c == '+' || c == '-'){
                string left = expression.substr(0, i);
                string right = expression.substr(i+1);

                vector<int> leftResults = diffWaysToCompute(left);
                vector<int> rightResults = diffWaysToCompute(right);

                for(int a: leftResults){
                    for(int b: rightResults){
                        if(c == '+') results.push_back(a+b);
                        else if(c == '*') results.push_back(a*b);
                        else if(c == '-') results.push_back(a-b);
                    }
                }
            }
        }
        if(results.empty()) results.push_back(stoi(expression));
        return results;
    }
};
