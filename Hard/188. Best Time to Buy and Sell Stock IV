// solved using dp take not take concept with a 3rd dimension for checking the cap here the cap is also a variable


// memiozation

class Solution {
public:
    int rec(int day, int buy, int cap, vector<int>& prices, vector<vector<vector<int>>>& dp, int n){
        if(cap == 0) return 0;
        if(day == n) return 0;

        if(dp[day][buy][cap] != -1) return dp[day][buy][cap];

        int profit = 0;
        if(buy){
            return dp[day][buy][cap] =  max(-prices[day] + rec(day+1, 0, cap, prices, dp, n), rec(day+1, 1, cap, prices, dp, n));
        }
        return dp[day][buy][cap] = max(prices[day] + rec(day+1, 1, cap-1, prices, dp, n), rec(day+1, 0, cap-1, prices, dp, n));
    }
    int maxProfit(int k, vector<int>& prices) {
        int n = prices.size();
        vector<vector<vector<int>>> dp(n, vector<vector<int>>(2, vector<int>(k+1, -1)));
        return rec(0, 1, k, prices, dp, n);
    }
};


// tabulation

class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
        int n = prices.size();
        vector<vector<vector<int>>> dp(n+1, vector<vector<int>>(2, vector<int>(k+1, 0)));
        for(int i=0; i<=n; i++) dp[i][0][0] = dp[i][1][0] = 0;
        dp[n][0][1] = dp[n][0][2] = dp[n][1][1] = dp[n][1][2] = 0;
        for(int day = n-1; day>=0; day--){
            for(int buy = 0; buy<=1; buy++){
                for(int cap = 1; cap<=k; cap++){
                    int profit = 0;
                    if(buy) dp[day][buy][cap] =  max(-prices[day] + dp[day+1][0][cap], dp[day+1][1][cap]);
                    else dp[day][buy][cap] =  max(prices[day] + dp[day+1][1][cap-1], dp[day+1][0][cap]);
                }
            }
        }
        return dp[0][1][2];
    }
};


// sapce optimization
