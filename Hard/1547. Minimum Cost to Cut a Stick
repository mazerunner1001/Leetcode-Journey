// implementing matrix chain multiplication on a secondary array (memoization)

class Solution {
public:
    int solve(int i, int j, vector<int>& cuts, vector<vector<int>>& dp){
        if(i>j) return 0;
        if(dp[i][j] != -1) return dp[i][j];
        int cost = INT_MAX;
        for(int k=i; k<=j; k++){
            int left = solve(i, k-1, cuts, dp);
            int right = solve(k+1, j, cuts, dp);
            int temp = cuts[j+1] - cuts[i-1] + right + left;
            cost = min(cost, temp);
        }
        return dp[i][j] = cost;
    }

    int minCost(int n, vector<int>& cuts) {
        cuts.push_back(0);
        cuts.push_back(n);
        sort(cuts.begin(), cuts.end());
        int m = cuts.size();
        vector<vector<int>> dp(m, vector<int>(m, -1));
        return solve(1, m-2, cuts, dp);
    }
};
