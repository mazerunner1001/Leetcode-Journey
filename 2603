// tree pruning

class Solution {
public:
    int collectTheCoins(vector<int>& coins, vector<vector<int>>& edges) {
        int n = coins.size();
        vector<set<int>> g(n);

        for(auto& e:edges) g[e[0]].insert(e[1]),g[e[1]].insert(e[0]);
        queue<int> leaves;

        int totalEdges = edges.size()*2, deleted=0;

        for(int i=0; i<n; i++) if(g[i].size() == 1 && coins[i] == 0) leaves.push(i);

        while(leaves.size()){
            int leaf = leaves.front();
            leaves.pop();
            if(g[leaf].empty()) continue;

            int p = *g[leaf].begin();

            g[p].erase(leaf), deleted++;
            g[leaf].erase(p), deleted++;

            if(g[p].size() == 1 && coins[p] == 0) leaves.push(p);
        }

        for(int i=0; i<n; i++) if(g[i].size() == 1) leaves.push(i);

        int step = 2;
        while(step--){
            int sz = leaves.size();
            while(sz--){
                int leaf = leaves.front();
                leaves.pop();
                if(!g[leaf].size()) continue;

                int p = *g[leaf].begin();

                g[p].erase(leaf), deleted++;
                g[leaf].erase(p), deleted++;

                if(g[p].size() == 1) leaves.push(p);
            }
        }
        return totalEdges-deleted;
    }
};
