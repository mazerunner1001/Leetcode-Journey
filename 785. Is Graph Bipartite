// bipartite question using bfs and dfs

class Solution {
public:
    bool isBipartite(vector<vector<int>>& graph) {
        int n = graph.size();
        vector<int> color(n, -1);
        for(int start = 0; start < n; start++){
            if (color[start] != -1) continue; 

            color[start] = 0;
            queue<int> q;
            q.push(start);
            while(!q.empty()){
                int node = q.front();
                q.pop();

                for(auto nei : graph[node]){
                    if(color[nei] == color[node]){
                        return false;
                    }
                    else if(color[nei] == -1){
                        color[nei] = 1 - color[node];
                        q.push(nei);
                    }
                }
            }
        }
        return true;
    }
};


class Solution {
public:
    bool dfs(int node, vector<int>& color, vector<vector<int>>& graph){

        for(auto nei : graph[node]){
            if(color[nei] == color[node]){
                return false;
            }
            else if(color[nei] == -1){
                color[nei] = 1 - color[node];
                if(!dfs(nei, color, graph)) return false;
            }
        }
        return true;
    }

    bool isBipartite(vector<vector<int>>& graph) {
        int n = graph.size();
        vector<int> color(n, -1);
        for(int start = 0; start < n; start++){
            if (color[start] == -1){
                color[start] = 0;
                if(dfs(start, color, graph) == false) return false;
            } 
        }
        return true;
    }
};
